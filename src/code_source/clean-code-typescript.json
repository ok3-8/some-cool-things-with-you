{
	"ocean": [
		{
			"id": "b9a89ba9-88aa-4999-9baa-88a899aba889",
			"language": "typescript",
			"description": " Use meaningful variable names\n\nDistinguish names in such a way that the reader knows what the differences offer.\n\n",
			"bad_code": "\n\n```ts\nfunction between<T>(a1: T, a2: T, a3: T): boolean {\n\treturn a2 <= a1 && a1 <= a3;\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction between<T>(value: T, left: T, right: T): boolean {\n\treturn left <= value && value <= right;\n}\n```\n\n"
		},
		{
			"id": "a8b9bba8-8a89-4a9a-9baa-b98aa898a9ba",
			"language": "typescript",
			"description": " Use pronounceable variable names\n\nIf you can’t pronounce it, you can’t discuss it without sounding like an idiot.\n\n",
			"bad_code": "\n\n```ts\ntype DtaRcrd102 = {\n\tgenymdhms: Date;\n\tmodymdhms: Date;\n\tpszqint: number;\n};\n```\n\n",
			"good_code": "\n\n```ts\ntype Customer = {\n\tgenerationTimestamp: Date;\n\tmodificationTimestamp: Date;\n\trecordId: number;\n};\n```\n\n"
		},
		{
			"id": "b98ab89a-aa8b-499a-88ab-988b89aab98b",
			"language": "typescript",
			"description": " Use the same vocabulary for the same type of variable\n\n",
			"bad_code": "\n\n```ts\nfunction getUserInfo(): User;\nfunction getUserDetails(): User;\nfunction getUserData(): User;\n```\n\n",
			"good_code": "\n\n```ts\nfunction getUser(): User;\n```\n\n"
		},
		{
			"id": "9b9a9a8a-bb9a-4ba9-ba8b-bb8baa8b9b89",
			"language": "typescript",
			"description": " Use searchable names\n\nWe will read more code than we will ever write. It's important that the code we do write must be readable and searchable. By _not_ naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like [TSLint](https://palantir.github.io/tslint/rules/no-magic-numbers/) can help identify unnamed constants.\n\n",
			"bad_code": "\n\n```ts\n// What the heck is 86400000 for?\nsetTimeout(restart, 86400000);\n```\n\n",
			"good_code": "\n\n```ts\n// Declare them as capitalized named constants.\nconst MILLISECONDS_IN_A_DAY = 24 * 60 * 60 * 1000;\n\nsetTimeout(restart, MILLISECONDS_IN_A_DAY);\n```\n\n"
		},
		{
			"id": "a8abb98a-ba88-4889-998a-88a98aba89bb",
			"language": "typescript",
			"description": " Use explanatory variables\n\n",
			"bad_code": "\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const keyValue of users) {\n\t// iterate through users map\n}\n```\n\n",
			"good_code": "\n\n```ts\ndeclare const users: Map<string, User>;\n\nfor (const [id, user] of users) {\n\t// iterate through users map\n}\n```\n\n"
		},
		{
			"id": "89ab8988-bb9a-48a8-8a9a-8aba9b9b8aba",
			"language": "typescript",
			"description": " Avoid Mental Mapping\n\nExplicit is better than implicit.  \n_Clarity is king._\n\n",
			"bad_code": "\n\n```ts\nconst u = getUser();\nconst s = getSubscription();\nconst t = charge(u, s);\n```\n\n",
			"good_code": "\n\n```ts\nconst user = getUser();\nconst subscription = getSubscription();\nconst transaction = charge(user, subscription);\n```\n\n"
		},
		{
			"id": "98a8a98b-baa8-4a98-a9b8-98aaaa8b9ba8",
			"language": "typescript",
			"description": " Don't add unneeded context\n\nIf your class/type/object name tells you something, don't repeat that in your variable name.\n\n",
			"bad_code": "\n\n```ts\ntype Car = {\n\tcarMake: string;\n\tcarModel: string;\n\tcarColor: string;\n};\n\nfunction print(car: Car): void {\n\tconsole.log(`${car.carMake} ${car.carModel} (${car.carColor})`);\n}\n```\n\n",
			"good_code": "\n\n```ts\ntype Car = {\n\tmake: string;\n\tmodel: string;\n\tcolor: string;\n};\n\nfunction print(car: Car): void {\n\tconsole.log(`${car.make} ${car.model} (${car.color})`);\n}\n```\n\n"
		},
		{
			"id": "8b88b99a-b8aa-4a8a-88b8-8baab9b9a999",
			"language": "typescript",
			"description": " Use default arguments instead of short circuiting or conditionals\n\nDefault arguments are often cleaner than short circuiting.\n\n",
			"bad_code": "\n\n```ts\nfunction loadPages(count?: number) {\n\tconst loadCount = count !== undefined ? count : 10;\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction loadPages(count: number = 10) {\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "89b89abb-aa88-4a8a-b88a-a898988ab8bb",
			"language": "typescript",
			"description": " Use enum to document the intent\n\nEnums can help you document the intent of the code. For example when we are concerned about values being\ndifferent rather than the exact value of those.\n\n",
			"bad_code": "\n\n```ts\nconst GENRE = {\n\tROMANTIC: 'romantic',\n\tDRAMA: 'drama',\n\tCOMEDY: 'comedy',\n\tDOCUMENTARY: 'documentary',\n};\n\nprojector.configureFilm(GENRE.COMEDY);\n\nclass Projector {\n\t// declaration of Projector\n\tconfigureFilm(genre) {\n\t\tswitch (genre) {\n\t\t\tcase GENRE.ROMANTIC:\n\t\t\t// some logic to be executed\n\t\t}\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nenum GENRE {\n\tROMANTIC,\n\tDRAMA,\n\tCOMEDY,\n\tDOCUMENTARY,\n}\n\nprojector.configureFilm(GENRE.COMEDY);\n\nclass Projector {\n\t// declaration of Projector\n\tconfigureFilm(genre) {\n\t\tswitch (genre) {\n\t\t\tcase GENRE.ROMANTIC:\n\t\t\t// some logic to be executed\n\t\t}\n\t}\n}\n```\n\n"
		},
		{
			"id": "889b9898-abba-4b9a-9aab-babbab9ab899",
			"language": "typescript",
			"description": " Function arguments (2 or fewer ideally)\n\nLimiting the number of function parameters is incredibly important because it makes testing your function easier.\nHaving more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.\n\nOne or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated.\nUsually, if you have more than two arguments then your function is trying to do too much.\nIn cases where it's not, most of the time a higher-level object will suffice as an argument.\n\nConsider using object literals if you are finding yourself needing a lot of arguments.\n\nTo make it obvious what properties the function expects, you can use the [destructuring](https://basarat.gitbook.io/typescript/future-javascript/destructuring) syntax.\nThis has a few advantages:\n\n1. When someone looks at the function signature, it's immediately clear what properties are being used.\n\n2. It can be used to simulate named parameters.\n\n3. Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.\n\n4. TypeScript warns you about unused properties, which would be impossible without destructuring.\n\n",
			"bad_code": "\n\n```ts\nfunction createMenu(title: string, body: string, buttonText: string, cancellable: boolean) {\n\t// ...\n}\n\ncreateMenu('Foo', 'Bar', 'Baz', true);\n```\n\n",
			"good_code": "\n\n```ts\nfunction createMenu(options: { title: string; body: string; buttonText: string; cancellable: boolean }) {\n\t// ...\n}\n\ncreateMenu({\n\ttitle: 'Foo',\n\tbody: 'Bar',\n\tbuttonText: 'Baz',\n\tcancellable: true,\n});\n```\n\nYou can further improve readability by using [type aliases](https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-aliases):\n\n```ts\ntype MenuOptions = { title: string; body: string; buttonText: string; cancellable: boolean };\n\nfunction createMenu(options: MenuOptions) {\n\t// ...\n}\n\ncreateMenu({\n\ttitle: 'Foo',\n\tbody: 'Bar',\n\tbuttonText: 'Baz',\n\tcancellable: true,\n});\n```\n\n"
		},
		{
			"id": "b98baaa8-8899-4abb-b8aa-aa989b88998b",
			"language": "typescript",
			"description": " Functions should do one thing\n\nThis is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you'll be ahead of many developers.\n\n",
			"bad_code": "\n\n```ts\nfunction emailClients(clients: Client[]) {\n\tclients.forEach((client) => {\n\t\tconst clientRecord = database.lookup(client);\n\t\tif (clientRecord.isActive()) {\n\t\t\temail(client);\n\t\t}\n\t});\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction emailClients(clients: Client[]) {\n\tclients.filter(isActiveClient).forEach(email);\n}\n\nfunction isActiveClient(client: Client) {\n\tconst clientRecord = database.lookup(client);\n\treturn clientRecord.isActive();\n}\n```\n\n"
		},
		{
			"id": "b88a8898-8898-4a9a-9bab-98bba9988998",
			"language": "typescript",
			"description": " Function names should say what they do\n\n",
			"bad_code": "\n\n```ts\nfunction addToDate(date: Date, month: number): Date {\n\t// ...\n}\n\nconst date = new Date();\n\n// It's hard to tell from the function name what is added\naddToDate(date, 1);\n```\n\n",
			"good_code": "\n\n```ts\nfunction addMonthToDate(date: Date, month: number): Date {\n\t// ...\n}\n\nconst date = new Date();\naddMonthToDate(date, 1);\n```\n\n"
		},
		{
			"id": "aa9a9a98-ab8a-4ab8-ab9a-b8b8aab99a9a",
			"language": "typescript",
			"description": " Functions should only be one level of abstraction\n\nWhen you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.\n\n",
			"bad_code": "\n\n```ts\nfunction parseCode(code: string) {\n\tconst REGEXES = [\n\t\t/* ... */\n\t];\n\tconst statements = code.split(' ');\n\tconst tokens = [];\n\n\tREGEXES.forEach((regex) => {\n\t\tstatements.forEach((statement) => {\n\t\t\t// ...\n\t\t});\n\t});\n\n\tconst ast = [];\n\ttokens.forEach((token) => {\n\t\t// lex...\n\t});\n\n\tast.forEach((node) => {\n\t\t// parse...\n\t});\n}\n```\n\n",
			"good_code": "\n\n```ts\nconst REGEXES = [\n\t/* ... */\n];\n\nfunction parseCode(code: string) {\n\tconst tokens = tokenize(code);\n\tconst syntaxTree = parse(tokens);\n\n\tsyntaxTree.forEach((node) => {\n\t\t// parse...\n\t});\n}\n\nfunction tokenize(code: string): Token[] {\n\tconst statements = code.split(' ');\n\tconst tokens: Token[] = [];\n\n\tREGEXES.forEach((regex) => {\n\t\tstatements.forEach((statement) => {\n\t\t\ttokens.push(/* ... */);\n\t\t});\n\t});\n\n\treturn tokens;\n}\n\nfunction parse(tokens: Token[]): SyntaxTree {\n\tconst syntaxTree: SyntaxTree[] = [];\n\ttokens.forEach((token) => {\n\t\tsyntaxTree.push(/* ... */);\n\t});\n\n\treturn syntaxTree;\n}\n```\n\n"
		},
		{
			"id": "9bba98a8-9bb8-4a99-ba9b-bb88a9aa98a8",
			"language": "typescript",
			"description": " Remove duplicate code\n\nDo your absolute best to avoid duplicate code.\nDuplicate code is bad because it means that there's more than one place to alter something if you need to change some logic.\n\nImagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc.\nIf you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them.\nIf you only have one list, there's only one place to update!\n\nOftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.\n\nGetting the abstraction right is critical, that's why you should follow the [SOLID](#solid) principles. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don't repeat yourself, otherwise, you'll find yourself updating multiple places anytime you want to change one thing.\n\n",
			"bad_code": "\n\n```ts\nfunction showDeveloperList(developers: Developer[]) {\n\tdevelopers.forEach((developer) => {\n\t\tconst expectedSalary = developer.calculateExpectedSalary();\n\t\tconst experience = developer.getExperience();\n\t\tconst githubLink = developer.getGithubLink();\n\n\t\tconst data = {\n\t\t\texpectedSalary,\n\t\t\texperience,\n\t\t\tgithubLink,\n\t\t};\n\n\t\trender(data);\n\t});\n}\n\nfunction showManagerList(managers: Manager[]) {\n\tmanagers.forEach((manager) => {\n\t\tconst expectedSalary = manager.calculateExpectedSalary();\n\t\tconst experience = manager.getExperience();\n\t\tconst portfolio = manager.getMBAProjects();\n\n\t\tconst data = {\n\t\t\texpectedSalary,\n\t\t\texperience,\n\t\t\tportfolio,\n\t\t};\n\n\t\trender(data);\n\t});\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass Developer {\n\t// ...\n\tgetExtraDetails() {\n\t\treturn {\n\t\t\tgithubLink: this.githubLink,\n\t\t};\n\t}\n}\n\nclass Manager {\n\t// ...\n\tgetExtraDetails() {\n\t\treturn {\n\t\t\tportfolio: this.portfolio,\n\t\t};\n\t}\n}\n\nfunction showEmployeeList(employee: Developer | Manager) {\n\temployee.forEach((employee) => {\n\t\tconst expectedSalary = employee.calculateExpectedSalary();\n\t\tconst experience = employee.getExperience();\n\t\tconst extra = employee.getExtraDetails();\n\n\t\tconst data = {\n\t\t\texpectedSalary,\n\t\t\texperience,\n\t\t\textra,\n\t\t};\n\n\t\trender(data);\n\t});\n}\n```\n\nYou should be critical about code duplication. Sometimes there is a tradeoff between duplicated code and increased complexity by introducing unnecessary abstraction. When two implementations from two different modules look similar but live in different domains, duplication might be acceptable and preferred over extracting the common code. The extracted common code, in this case, introduces an indirect dependency between the two modules.\n\n"
		},
		{
			"id": "9899a9ab-98b8-4bbb-98ab-a98b989ab898",
			"language": "typescript",
			"description": " Set default objects with Object.assign or destructuring\n\n",
			"bad_code": "\n\n```ts\ntype MenuConfig = { title?: string; body?: string; buttonText?: string; cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n\tconfig.title = config.title || 'Foo';\n\tconfig.body = config.body || 'Bar';\n\tconfig.buttonText = config.buttonText || 'Baz';\n\tconfig.cancellable = config.cancellable !== undefined ? config.cancellable : true;\n\n\t// ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\n",
			"good_code": "\n\n```ts\ntype MenuConfig = { title?: string; body?: string; buttonText?: string; cancellable?: boolean };\n\nfunction createMenu(config: MenuConfig) {\n\tconst menuConfig = Object.assign(\n\t\t{\n\t\t\ttitle: 'Foo',\n\t\t\tbody: 'Bar',\n\t\t\tbuttonText: 'Baz',\n\t\t\tcancellable: true,\n\t\t},\n\t\tconfig\n\t);\n\n\t// ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\nAlternatively, you can use destructuring with default values:\n\n```ts\ntype MenuConfig = { title?: string; body?: string; buttonText?: string; cancellable?: boolean };\n\nfunction createMenu({ title = 'Foo', body = 'Bar', buttonText = 'Baz', cancellable = true }: MenuConfig) {\n\t// ...\n}\n\ncreateMenu({ body: 'Bar' });\n```\n\nTo avoid any side effects and unexpected behavior by passing in explicitly the `undefined` or `null` value, you can tell the TypeScript compiler to not allow it.\nSee [`--strictNullChecks`](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks) option in TypeScript.\n\n"
		},
		{
			"id": "999bb99a-b898-4aba-9898-998a8b9988a8",
			"language": "typescript",
			"description": " Don't use flags as function parameters\n\nFlags tell your user that this function does more than one thing.\nFunctions should do one thing. Split out your functions if they are following different code paths based on a boolean.\n\n",
			"bad_code": "\n\n```ts\nfunction createFile(name: string, temp: boolean) {\n\tif (temp) {\n\t\tfs.create(`./temp/${name}`);\n\t} else {\n\t\tfs.create(name);\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction createTempFile(name: string) {\n\tcreateFile(`./temp/${name}`);\n}\n\nfunction createFile(name: string) {\n\tfs.create(name);\n}\n```\n\n"
		},
		{
			"id": "9a88b9ab-8bb8-49a8-9b98-9aa98ba9bba8",
			"language": "typescript",
			"description": " Avoid Side Effects (part 1)\n\nA function produces a side effect if it does anything other than take a value in and return another value or values.\nA side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.\n\nNow, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file.\nWhat you want to do is to centralize where you are doing this. Don't have several functions and classes that write to a particular file.\nHave one service that does it. One and only one.\n\nThe main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.\n\n",
			"bad_code": "\n\n```ts\n// Global variable referenced by following function.\nlet name = 'Robert C. Martin';\n\nfunction toBase64() {\n\tname = btoa(name);\n}\n\ntoBase64();\n// If we had another function that used this name, now it'd be a Base64 value\n\nconsole.log(name); // expected to print 'Robert C. Martin' but instead 'Um9iZXJ0IEMuIE1hcnRpbg=='\n```\n\n",
			"good_code": "\n\n```ts\nconst name = 'Robert C. Martin';\n\nfunction toBase64(text: string): string {\n\treturn btoa(text);\n}\n\nconst encodedName = toBase64(name);\nconsole.log(name);\n```\n\n"
		},
		{
			"id": "ba998b8b-999b-4a99-8aa9-aa9a98abaaa9",
			"language": "typescript",
			"description": " Avoid Side Effects (part 2)\n\nIn JavaScript, primitives are passed by value and objects/arrays are passed by reference. In the case of objects and arrays, if your function makes a change in a shopping cart array, for example, by adding an item to purchase, then any other function that uses that `cart` array will be affected by this addition. That may be great, however, it can be bad too. Let's imagine a bad situation:\n\nThe user clicks the \"Purchase\", a button which calls a `purchase` function that spawns a network request and sends the `cart` array to the server. Because of a bad network connection, the purchase function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks \"Add to Cart\" button on an item they don't actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because it has a reference to a shopping cart array that the `addItemToCart` function modified by adding an unwanted item.\n\nA great solution would be for the `addItemToCart` to always clone the `cart`, edit it, and return the clone. This ensures that no other functions that are holding onto a reference to the shopping cart will be affected by any changes.\n\nTwo caveats to mention to this approach:\n\n1. There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects! (see [pure function](https://en.wikipedia.org/wiki/Pure_function))\n\n2. Cloning big objects can be very expensive in terms of performance. Luckily, this isn't a big issue in practice because there are great libraries that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.\n\n",
			"bad_code": "\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): void {\n\tcart.push({ item, date: Date.now() });\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction addItemToCart(cart: CartItem[], item: Item): CartItem[] {\n\treturn [...cart, { item, date: Date.now() }];\n}\n```\n\n"
		},
		{
			"id": "88bb9baa-9a88-4bab-b8aa-888abb89b98b",
			"language": "typescript",
			"description": " Don't write to global functions\n\nPolluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let's think about an example: what if you wanted to extend JavaScript's native Array method to have a `diff` method that could show the difference between two arrays? You could write your new function to the `Array.prototype`, but it could clash with another library that tried to do the same thing. What if that other library was just using `diff` to find the difference between the first and last elements of an array? This is why it would be much better to just use classes and simply extend the `Array` global.\n\n",
			"bad_code": "\n\n```ts\ndeclare global {\n\tinterface Array<T> {\n\t\tdiff(other: T[]): Array<T>;\n\t}\n}\n\nif (!Array.prototype.diff) {\n\tArray.prototype.diff = function <T>(other: T[]): T[] {\n\t\tconst hash = new Set(other);\n\t\treturn this.filter((elem) => !hash.has(elem));\n\t};\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass MyArray<T> extends Array<T> {\n\tdiff(other: T[]): T[] {\n\t\tconst hash = new Set(other);\n\t\treturn this.filter((elem) => !hash.has(elem));\n\t}\n}\n```\n\n"
		},
		{
			"id": "ba898b89-9a99-4ab8-9998-98a888a998ba",
			"language": "typescript",
			"description": " Favor functional programming over imperative programming\n\nFavor this style of programming when you can.\n\n",
			"bad_code": "\n\n```ts\nconst contributions = [\n\t{\n\t\tname: 'Uncle Bobby',\n\t\tlinesOfCode: 500,\n\t},\n\t{\n\t\tname: 'Suzie Q',\n\t\tlinesOfCode: 1500,\n\t},\n\t{\n\t\tname: 'Jimmy Gosling',\n\t\tlinesOfCode: 150,\n\t},\n\t{\n\t\tname: 'Gracie Hopper',\n\t\tlinesOfCode: 1000,\n\t},\n];\n\nlet totalOutput = 0;\n\nfor (let i = 0; i < contributions.length; i++) {\n\ttotalOutput += contributions[i].linesOfCode;\n}\n```\n\n",
			"good_code": "\n\n```ts\nconst contributions = [\n\t{\n\t\tname: 'Uncle Bobby',\n\t\tlinesOfCode: 500,\n\t},\n\t{\n\t\tname: 'Suzie Q',\n\t\tlinesOfCode: 1500,\n\t},\n\t{\n\t\tname: 'Jimmy Gosling',\n\t\tlinesOfCode: 150,\n\t},\n\t{\n\t\tname: 'Gracie Hopper',\n\t\tlinesOfCode: 1000,\n\t},\n];\n\nconst totalOutput = contributions.reduce((totalLines, output) => totalLines + output.linesOfCode, 0);\n```\n\n"
		},
		{
			"id": "a9b88ba9-9a99-4989-9b88-98aa88bb898a",
			"language": "typescript",
			"description": " Encapsulate conditionals\n\n",
			"bad_code": "\n\n```ts\nif (subscription.isTrial || account.balance > 0) {\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction canActivateService(subscription: Subscription, account: Account) {\n\treturn subscription.isTrial || account.balance > 0;\n}\n\nif (canActivateService(subscription, account)) {\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "8a89989a-ba89-4baa-8aab-8bb8ab888ba9",
			"language": "typescript",
			"description": " Avoid negative conditionals\n\n",
			"bad_code": "\n\n```ts\nfunction isEmailNotUsed(email: string): boolean {\n\t// ...\n}\n\nif (isEmailNotUsed(email)) {\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction isEmailUsed(email: string): boolean {\n\t// ...\n}\n\nif (!isEmailUsed(node)) {\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "aa989a88-8bb9-49aa-8ba9-999a8aab8a8b",
			"language": "typescript",
			"description": " Avoid conditionals\n\nThis seems like an impossible task. Upon first hearing this, most people say, \"how am I supposed to do anything without an `if` statement?\" The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, \"well that's great but why would I want to do that?\" The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have `if` statements, you are telling your user that your function does more than one thing. Remember, just do one thing.\n\n",
			"bad_code": "\n\n```ts\nclass Airplane {\n\tprivate type: string;\n\t// ...\n\n\tgetCruisingAltitude() {\n\t\tswitch (this.type) {\n\t\t\tcase '777':\n\t\t\t\treturn this.getMaxAltitude() - this.getPassengerCount();\n\t\t\tcase 'Air Force One':\n\t\t\t\treturn this.getMaxAltitude();\n\t\t\tcase 'Cessna':\n\t\t\t\treturn this.getMaxAltitude() - this.getFuelExpenditure();\n\t\t\tdefault:\n\t\t\t\tthrow new Error('Unknown airplane type.');\n\t\t}\n\t}\n\n\tprivate getMaxAltitude(): number {\n\t\t// ...\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nabstract class Airplane {\n\tprotected getMaxAltitude(): number {\n\t\t// shared logic with subclasses ...\n\t}\n\n\t// ...\n}\n\nclass Boeing777 extends Airplane {\n\t// ...\n\tgetCruisingAltitude() {\n\t\treturn this.getMaxAltitude() - this.getPassengerCount();\n\t}\n}\n\nclass AirForceOne extends Airplane {\n\t// ...\n\tgetCruisingAltitude() {\n\t\treturn this.getMaxAltitude();\n\t}\n}\n\nclass Cessna extends Airplane {\n\t// ...\n\tgetCruisingAltitude() {\n\t\treturn this.getMaxAltitude() - this.getFuelExpenditure();\n\t}\n}\n```\n\n"
		},
		{
			"id": "9a9b8a8b-ab98-4bba-ba8b-ba9bbab9a9ba",
			"language": "typescript",
			"description": " Avoid type checking\n\nTypeScript is a strict syntactical superset of JavaScript and adds optional static type checking to the language.\nAlways prefer to specify types of variables, parameters and return values to leverage the full power of TypeScript features.\nIt makes refactoring more easier.\n\n",
			"bad_code": "\n\n```ts\nfunction travelToTexas(vehicle: Bicycle | Car) {\n\tif (vehicle instanceof Bicycle) {\n\t\tvehicle.pedal(currentLocation, new Location('texas'));\n\t} else if (vehicle instanceof Car) {\n\t\tvehicle.drive(currentLocation, new Location('texas'));\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\ntype Vehicle = Bicycle | Car;\n\nfunction travelToTexas(vehicle: Vehicle) {\n\tvehicle.move(currentLocation, new Location('texas'));\n}\n```\n\n"
		},
		{
			"id": "8a9aaba9-a98a-4b98-a99b-99ab99bb8aba",
			"language": "typescript",
			"description": " Don't over-optimize\n\nModern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. There are good [resources](https://github.com/petkaantonov/bluebird/wiki/Optimization-killers) for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.\n\n",
			"bad_code": "\n\n```ts\n// On old browsers, each iteration with uncached `list.length` would be costly\n// because of `list.length` recomputation. In modern browsers, this is optimized.\nfor (let i = 0, len = list.length; i < len; i++) {\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nfor (let i = 0; i < list.length; i++) {\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "99b8bb9a-8b9a-4bba-9bbb-9abbabaaa9a9",
			"language": "typescript",
			"description": " Remove dead code\n\nDead code is just as bad as duplicate code. There's no reason to keep it in your codebase.\nIf it's not being called, get rid of it! It will still be safe in your version history if you still need it.\n\n",
			"bad_code": "\n\n```ts\nfunction oldRequestModule(url: string) {\n\t// ...\n}\n\nfunction requestModule(url: string) {\n\t// ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n",
			"good_code": "\n\n```ts\nfunction requestModule(url: string) {\n\t// ...\n}\n\nconst req = requestModule;\ninventoryTracker('apples', req, 'www.inventory-awesome.io');\n```\n\n"
		},
		{
			"id": "89ba9a99-8aab-4888-aab9-b8888aabaa99",
			"language": "typescript",
			"description": " Use iterators and generators\n\nUse generators and iterables when working with collections of data used like a stream.  \nThere are some good reasons:\n\n-   decouples the callee from the generator implementation in a sense that callee decides how many\n    items to access\n-   lazy execution, items are streamed on-demand\n-   built-in support for iterating items using the `for-of` syntax\n-   iterables allow implementing optimized iterator patterns\n\n",
			"bad_code": "\n\n```ts\nfunction fibonacci(n: number): number[] {\n\tif (n === 1) return [0];\n\tif (n === 2) return [0, 1];\n\n\tconst items: number[] = [0, 1];\n\twhile (items.length < n) {\n\t\titems.push(items[items.length - 2] + items[items.length - 1]);\n\t}\n\n\treturn items;\n}\n\nfunction print(n: number) {\n\tfibonacci(n).forEach((fib) => console.log(fib));\n}\n\n// Print first 10 Fibonacci numbers.\nprint(10);\n```\n\n",
			"good_code": "\n\n```ts\n// Generates an infinite stream of Fibonacci numbers.\n// The generator doesn't keep the array of all numbers.\nfunction* fibonacci(): IterableIterator<number> {\n\tlet [a, b] = [0, 1];\n\n\twhile (true) {\n\t\tyield a;\n\t\t[a, b] = [b, a + b];\n\t}\n}\n\nfunction print(n: number) {\n\tlet i = 0;\n\tfor (const fib of fibonacci()) {\n\t\tif (i++ === n) break;\n\t\tconsole.log(fib);\n\t}\n}\n\n// Print first 10 Fibonacci numbers.\nprint(10);\n```\n\nThere are libraries that allow working with iterables in a similar way as with native arrays, by\nchaining methods like `map`, `slice`, `forEach` etc. See [itiriri](https://www.npmjs.com/package/itiriri) for\nan example of advanced manipulation with iterables (or [itiriri-async](https://www.npmjs.com/package/itiriri-async) for manipulation of async iterables).\n\n```ts\nimport itiriri from 'itiriri';\n\nfunction* fibonacci(): IterableIterator<number> {\n\tlet [a, b] = [0, 1];\n\n\twhile (true) {\n\t\tyield a;\n\t\t[a, b] = [b, a + b];\n\t}\n}\n\nitiriri(fibonacci())\n\t.take(10)\n\t.forEach((fib) => console.log(fib));\n```\n\n"
		},
		{
			"id": "9988abaa-8a9b-489a-9aa9-b89a9b8aba9b",
			"language": "typescript",
			"description": " Use getters and setters\n\nTypeScript supports getter/setter syntax.\nUsing getters and setters to access data from objects that encapsulate behavior could be better than simply looking for a property on an object.\n\"Why?\" you might ask. Well, here's a list of reasons:\n\n-   When you want to do more beyond getting an object property, you don't have to look up and change every accessor in your codebase.\n-   Makes adding validation simple when doing a `set`.\n-   Encapsulates the internal representation.\n-   Easy to add logging and error handling when getting and setting.\n-   You can lazy load your object's properties, let's say getting it from a server.\n\n",
			"bad_code": "\n\n```ts\ntype BankAccount = {\n\tbalance: number;\n\t// ...\n};\n\nconst value = 100;\nconst account: BankAccount = {\n\tbalance: 0,\n\t// ...\n};\n\nif (value < 0) {\n\tthrow new Error('Cannot set negative balance.');\n}\n\naccount.balance = value;\n```\n\n",
			"good_code": "\n\n```ts\nclass BankAccount {\n\tprivate accountBalance: number = 0;\n\n\tget balance(): number {\n\t\treturn this.accountBalance;\n\t}\n\n\tset balance(value: number) {\n\t\tif (value < 0) {\n\t\t\tthrow new Error('Cannot set negative balance.');\n\t\t}\n\n\t\tthis.accountBalance = value;\n\t}\n\n\t// ...\n}\n\n// Now `BankAccount` encapsulates the validation logic.\n// If one day the specifications change, and we need extra validation rule,\n// we would have to alter only the `setter` implementation,\n// leaving all dependent code unchanged.\nconst account = new BankAccount();\naccount.balance = 100;\n```\n\n"
		},
		{
			"id": "baaa9b99-8bb8-4988-ba98-b89a9a89baaa",
			"language": "typescript",
			"description": " Make objects have private/protected members\n\nTypeScript supports `public` _(default)_, `protected` and `private` accessors on class members.\n\n",
			"bad_code": "\n\n```ts\nclass Circle {\n\tradius: number;\n\n\tconstructor(radius: number) {\n\t\tthis.radius = radius;\n\t}\n\n\tperimeter() {\n\t\treturn 2 * Math.PI * this.radius;\n\t}\n\n\tsurface() {\n\t\treturn Math.PI * this.radius * this.radius;\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass Circle {\n\tconstructor(private readonly radius: number) {}\n\n\tperimeter() {\n\t\treturn 2 * Math.PI * this.radius;\n\t}\n\n\tsurface() {\n\t\treturn Math.PI * this.radius * this.radius;\n\t}\n}\n```\n\n"
		},
		{
			"id": "9899baa8-bab8-4bba-b88a-aabaa988ba8b",
			"language": "typescript",
			"description": " Prefer immutability\n\nTypeScript's type system allows you to mark individual properties on an interface/class as _readonly_. This allows you to work in a functional way (an unexpected mutation is bad).  \nFor more advanced scenarios there is a built-in type `Readonly` that takes a type `T` and marks all of its properties as readonly using mapped types (see [mapped types](https://www.typescriptlang.org/docs/handbook/advanced-types.html#mapped-types)).\n\n",
			"bad_code": "\n\n```ts\ninterface Config {\n\thost: string;\n\tport: string;\n\tdb: string;\n}\n```\n\n",
			"good_code": "\n\n```ts\ninterface Config {\n\treadonly host: string;\n\treadonly port: string;\n\treadonly db: string;\n}\n```\n\nCase of Array, you can create a read-only array by using `ReadonlyArray<T>`.\ndo not allow changes such as `push()` and `fill()`, but can use features such as `concat()` and `slice()` that do not change the value.\n\n**Bad:**\n\n```ts\nconst array: number[] = [1, 3, 5];\narray = []; // error\narray.push(100); // array will updated\n```\n\n**Good:**\n\n```ts\nconst array: ReadonlyArray<number> = [1, 3, 5];\narray = []; // error\narray.push(100); // error\n```\n\nDeclaring read-only arguments in [TypeScript 3.4 is a bit easier](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#improvements-for-readonlyarray-and-readonly-tuples).\n\n```ts\nfunction hoge(args: readonly string[]) {\n\targs.push(1); // error\n}\n```\n\nPrefer [const assertions](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#const-assertions) for literal values.\n\n**Bad:**\n\n```ts\nconst config = {\n\thello: 'world',\n};\nconfig.hello = 'world'; // value is changed\n\nconst array = [1, 3, 5];\narray[0] = 10; // value is changed\n\n// writable objects is returned\nfunction readonlyData(value: number) {\n\treturn { value };\n}\n\nconst result = readonlyData(100);\nresult.value = 200; // value is changed\n```\n\n**Good:**\n\n```ts\n// read-only object\nconst config = {\n\thello: 'world',\n} as const;\nconfig.hello = 'world'; // error\n\n// read-only array\nconst array = [1, 3, 5] as const;\narray[0] = 10; // error\n\n// You can return read-only objects\nfunction readonlyData(value: number) {\n\treturn { value } as const;\n}\n\nconst result = readonlyData(100);\nresult.value = 200; // error\n```\n\n"
		},
		{
			"id": "8b8b98a9-8aa8-4abb-ab8a-bbab8b8b8bb9",
			"language": "typescript",
			"description": " type vs. interface\n\nUse type when you might need a union or intersection. Use an interface when you want `extends` or `implements`. There is no strict rule, however, use the one that works for you.  \nFor a more detailed explanation refer to this [answer](https://stackoverflow.com/questions/37233735/typescript-interfaces-vs-types/54101543#54101543) about the differences between `type` and `interface` in TypeScript.\n\n",
			"bad_code": "\n\n```ts\ninterface EmailConfig {\n\t// ...\n}\n\ninterface DbConfig {\n\t// ...\n}\n\ninterface Config {\n\t// ...\n}\n\n//...\n\ntype Shape = {\n\t// ...\n};\n```\n\n",
			"good_code": "\n\n```ts\ntype EmailConfig = {\n\t// ...\n};\n\ntype DbConfig = {\n\t// ...\n};\n\ntype Config = EmailConfig | DbConfig;\n\n// ...\n\ninterface Shape {\n\t// ...\n}\n\nclass Circle implements Shape {\n\t// ...\n}\n\nclass Square implements Shape {\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "8a9b8899-bba8-49a9-9ab9-aaa9a98b998b",
			"language": "typescript",
			"description": " Classes should be small\n\nThe class' size is measured by its responsibility. Following the _Single Responsibility principle_ a class should be small.\n\n",
			"bad_code": "\n\n```ts\nclass Dashboard {\n\tgetLanguage(): string {\n\t\t/* ... */\n\t}\n\tsetLanguage(language: string): void {\n\t\t/* ... */\n\t}\n\tshowProgress(): void {\n\t\t/* ... */\n\t}\n\thideProgress(): void {\n\t\t/* ... */\n\t}\n\tisDirty(): boolean {\n\t\t/* ... */\n\t}\n\tdisable(): void {\n\t\t/* ... */\n\t}\n\tenable(): void {\n\t\t/* ... */\n\t}\n\taddSubscription(subscription: Subscription): void {\n\t\t/* ... */\n\t}\n\tremoveSubscription(subscription: Subscription): void {\n\t\t/* ... */\n\t}\n\taddUser(user: User): void {\n\t\t/* ... */\n\t}\n\tremoveUser(user: User): void {\n\t\t/* ... */\n\t}\n\tgoToHomePage(): void {\n\t\t/* ... */\n\t}\n\tupdateProfile(details: UserDetails): void {\n\t\t/* ... */\n\t}\n\tgetVersion(): string {\n\t\t/* ... */\n\t}\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass Dashboard {\n\tdisable(): void {\n\t\t/* ... */\n\t}\n\tenable(): void {\n\t\t/* ... */\n\t}\n\tgetVersion(): string {\n\t\t/* ... */\n\t}\n}\n\n// split the responsibilities by moving the remaining methods to other classes\n// ...\n```\n\n"
		},
		{
			"id": "a89aa9aa-99ba-49ab-9899-9988aab998bb",
			"language": "typescript",
			"description": " High cohesion and low coupling\n\nCohesion defines the degree to which class members are related to each other. Ideally, all fields within a class should be used by each method.\nWe then say that the class is _maximally cohesive_. In practice, this, however, is not always possible, nor even advisable. You should however prefer cohesion to be high.\n\nCoupling refers to how related or dependent are two classes toward each other. Classes are said to be low coupled if changes in one of them don't affect the other one.\n\nGood software design has **high cohesion** and **low coupling**.\n\n",
			"bad_code": "\n\n```ts\nclass UserManager {\n\t// Bad: each private variable is used by one or another group of methods.\n\t// It makes clear evidence that the class is holding more than a single responsibility.\n\t// If I need only to create the service to get the transactions for a user,\n\t// I'm still forced to pass and instance of `emailSender`.\n\tconstructor(private readonly db: Database, private readonly emailSender: EmailSender) {}\n\n\tasync getUser(id: number): Promise<User> {\n\t\treturn await db.users.findOne({ id });\n\t}\n\n\tasync getTransactions(userId: number): Promise<Transaction[]> {\n\t\treturn await db.transactions.find({ userId });\n\t}\n\n\tasync sendGreeting(): Promise<void> {\n\t\tawait emailSender.send('Welcome!');\n\t}\n\n\tasync sendNotification(text: string): Promise<void> {\n\t\tawait emailSender.send(text);\n\t}\n\n\tasync sendNewsletter(): Promise<void> {\n\t\t// ...\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass UserService {\n\tconstructor(private readonly db: Database) {}\n\n\tasync getUser(id: number): Promise<User> {\n\t\treturn await this.db.users.findOne({ id });\n\t}\n\n\tasync getTransactions(userId: number): Promise<Transaction[]> {\n\t\treturn await this.db.transactions.find({ userId });\n\t}\n}\n\nclass UserNotifier {\n\tconstructor(private readonly emailSender: EmailSender) {}\n\n\tasync sendGreeting(): Promise<void> {\n\t\tawait this.emailSender.send('Welcome!');\n\t}\n\n\tasync sendNotification(text: string): Promise<void> {\n\t\tawait this.emailSender.send(text);\n\t}\n\n\tasync sendNewsletter(): Promise<void> {\n\t\t// ...\n\t}\n}\n```\n\n"
		},
		{
			"id": "baa98ba9-9bb8-4abb-8abb-abbaaba8aa88",
			"language": "typescript",
			"description": " Prefer composition over inheritance\n\nAs stated famously in [Design Patterns](https://en.wikipedia.org/wiki/Design_Patterns) by the Gang of Four, you should _prefer composition over inheritance_ where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.\n\nYou might be wondering then, \"when should I use inheritance?\" It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:\n\n1. Your inheritance represents an \"is-a\" relationship and not a \"has-a\" relationship (Human->Animal vs. User->UserDetails).\n\n2. You can reuse code from the base classes (Humans can move like all animals).\n\n3. You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).\n\n",
			"bad_code": "\n\n```ts\nclass Employee {\n\tconstructor(private readonly name: string, private readonly email: string) {}\n\n\t// ...\n}\n\n// Bad because Employees \"have\" tax data. EmployeeTaxData is not a type of Employee\nclass EmployeeTaxData extends Employee {\n\tconstructor(name: string, email: string, private readonly ssn: string, private readonly salary: number) {\n\t\tsuper(name, email);\n\t}\n\n\t// ...\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass Employee {\n\tprivate taxData: EmployeeTaxData;\n\n\tconstructor(private readonly name: string, private readonly email: string) {}\n\n\tsetTaxData(ssn: string, salary: number): Employee {\n\t\tthis.taxData = new EmployeeTaxData(ssn, salary);\n\t\treturn this;\n\t}\n\n\t// ...\n}\n\nclass EmployeeTaxData {\n\tconstructor(public readonly ssn: string, public readonly salary: number) {}\n\n\t// ...\n}\n```\n\n"
		},
		{
			"id": "baa8ab9b-b8b8-49ab-9999-9bb9baaa88a8",
			"language": "typescript",
			"description": " Use method chaining\n\nThis pattern is very useful and commonly used in many libraries. It allows your code to be expressive, and less verbose. For that reason, use method chaining and take a look at how clean your code will be.\n\n",
			"bad_code": "\n\n```ts\nclass QueryBuilder {\n\tprivate collection: string;\n\tprivate pageNumber: number = 1;\n\tprivate itemsPerPage: number = 100;\n\tprivate orderByFields: string[] = [];\n\n\tfrom(collection: string): void {\n\t\tthis.collection = collection;\n\t}\n\n\tpage(number: number, itemsPerPage: number = 100): void {\n\t\tthis.pageNumber = number;\n\t\tthis.itemsPerPage = itemsPerPage;\n\t}\n\n\torderBy(...fields: string[]): void {\n\t\tthis.orderByFields = fields;\n\t}\n\n\tbuild(): Query {\n\t\t// ...\n\t}\n}\n\n// ...\n\nconst queryBuilder = new QueryBuilder();\nqueryBuilder.from('users');\nqueryBuilder.page(1, 100);\nqueryBuilder.orderBy('firstName', 'lastName');\n\nconst query = queryBuilder.build();\n```\n\n",
			"good_code": "\n\n```ts\nclass QueryBuilder {\n\tprivate collection: string;\n\tprivate pageNumber: number = 1;\n\tprivate itemsPerPage: number = 100;\n\tprivate orderByFields: string[] = [];\n\n\tfrom(collection: string): this {\n\t\tthis.collection = collection;\n\t\treturn this;\n\t}\n\n\tpage(number: number, itemsPerPage: number = 100): this {\n\t\tthis.pageNumber = number;\n\t\tthis.itemsPerPage = itemsPerPage;\n\t\treturn this;\n\t}\n\n\torderBy(...fields: string[]): this {\n\t\tthis.orderByFields = fields;\n\t\treturn this;\n\t}\n\n\tbuild(): Query {\n\t\t// ...\n\t}\n}\n\n// ...\n\nconst query = new QueryBuilder().from('users').page(1, 100).orderBy('firstName', 'lastName').build();\n```\n\n"
		},
		{
			"id": "aaa89ab8-bba9-48aa-9b98-bbbabbbb89b8",
			"language": "typescript",
			"description": " Single Responsibility Principle (SRP)\n\nAs stated in Clean Code, \"There should never be more than one reason for a class to change\". It's tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won't be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of time you need to change a class is important. It's important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.\n\n",
			"bad_code": "\n\n```ts\nclass UserSettings {\n\tconstructor(private readonly user: User) {}\n\n\tchangeSettings(settings: UserSettings) {\n\t\tif (this.verifyCredentials()) {\n\t\t\t// ...\n\t\t}\n\t}\n\n\tverifyCredentials() {\n\t\t// ...\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass UserAuth {\n\tconstructor(private readonly user: User) {}\n\n\tverifyCredentials() {\n\t\t// ...\n\t}\n}\n\nclass UserSettings {\n\tprivate readonly auth: UserAuth;\n\n\tconstructor(private readonly user: User) {\n\t\tthis.auth = new UserAuth(user);\n\t}\n\n\tchangeSettings(settings: UserSettings) {\n\t\tif (this.auth.verifyCredentials()) {\n\t\t\t// ...\n\t\t}\n\t}\n}\n```\n\n"
		},
		{
			"id": "ba899a89-8aaa-488b-8bba-99baaaabaaa9",
			"language": "typescript",
			"description": " Open/Closed Principle (OCP)\n\nAs stated by Bertrand Meyer, \"software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.\" What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.\n\n",
			"bad_code": "\n\n```ts\nclass AjaxAdapter extends Adapter {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// ...\n}\n\nclass NodeAdapter extends Adapter {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\t// ...\n}\n\nclass HttpRequester {\n\tconstructor(private readonly adapter: Adapter) {}\n\n\tasync fetch<T>(url: string): Promise<T> {\n\t\tif (this.adapter instanceof AjaxAdapter) {\n\t\t\tconst response = await makeAjaxCall<T>(url);\n\t\t\t// transform response and return\n\t\t} else if (this.adapter instanceof NodeAdapter) {\n\t\t\tconst response = await makeHttpCall<T>(url);\n\t\t\t// transform response and return\n\t\t}\n\t}\n}\n\nfunction makeAjaxCall<T>(url: string): Promise<T> {\n\t// request and return promise\n}\n\nfunction makeHttpCall<T>(url: string): Promise<T> {\n\t// request and return promise\n}\n```\n\n",
			"good_code": "\n\n```ts\nabstract class Adapter {\n\tabstract async request<T>(url: string): Promise<T>;\n\n\t// code shared to subclasses ...\n}\n\nclass AjaxAdapter extends Adapter {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tasync request<T>(url: string): Promise<T> {\n\t\t// request and return promise\n\t}\n\n\t// ...\n}\n\nclass NodeAdapter extends Adapter {\n\tconstructor() {\n\t\tsuper();\n\t}\n\n\tasync request<T>(url: string): Promise<T> {\n\t\t// request and return promise\n\t}\n\n\t// ...\n}\n\nclass HttpRequester {\n\tconstructor(private readonly adapter: Adapter) {}\n\n\tasync fetch<T>(url: string): Promise<T> {\n\t\tconst response = await this.adapter.request<T>(url);\n\t\t// transform response and return\n\t}\n}\n```\n\n"
		},
		{
			"id": "a9b88b9b-99b8-4a9a-888b-9b9bb89b8a88",
			"language": "typescript",
			"description": " Liskov Substitution Principle (LSP)\n\nThis is a scary term for a very simple concept. It's formally defined as \"If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).\" That's an even scarier definition.\n\nThe best explanation for this is if you have a parent class and a child class, then the parent class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let's take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the \"is-a\" relationship via inheritance, you quickly get into trouble.\n\n",
			"bad_code": "\n\n```ts\nclass Rectangle {\n\tconstructor(protected width: number = 0, protected height: number = 0) {}\n\n\tsetColor(color: string): this {\n\t\t// ...\n\t}\n\n\trender(area: number) {\n\t\t// ...\n\t}\n\n\tsetWidth(width: number): this {\n\t\tthis.width = width;\n\t\treturn this;\n\t}\n\n\tsetHeight(height: number): this {\n\t\tthis.height = height;\n\t\treturn this;\n\t}\n\n\tgetArea(): number {\n\t\treturn this.width * this.height;\n\t}\n}\n\nclass Square extends Rectangle {\n\tsetWidth(width: number): this {\n\t\tthis.width = width;\n\t\tthis.height = width;\n\t\treturn this;\n\t}\n\n\tsetHeight(height: number): this {\n\t\tthis.width = height;\n\t\tthis.height = height;\n\t\treturn this;\n\t}\n}\n\nfunction renderLargeRectangles(rectangles: Rectangle[]) {\n\trectangles.forEach((rectangle) => {\n\t\tconst area = rectangle.setWidth(4).setHeight(5).getArea(); // BAD: Returns 25 for Square. Should be 20.\n\t\trectangle.render(area);\n\t});\n}\n\nconst rectangles = [new Rectangle(), new Rectangle(), new Square()];\nrenderLargeRectangles(rectangles);\n```\n\n",
			"good_code": "\n\n```ts\nabstract class Shape {\n\tsetColor(color: string): this {\n\t\t// ...\n\t}\n\n\trender(area: number) {\n\t\t// ...\n\t}\n\n\tabstract getArea(): number;\n}\n\nclass Rectangle extends Shape {\n\tconstructor(private readonly width = 0, private readonly height = 0) {\n\t\tsuper();\n\t}\n\n\tgetArea(): number {\n\t\treturn this.width * this.height;\n\t}\n}\n\nclass Square extends Shape {\n\tconstructor(private readonly length: number) {\n\t\tsuper();\n\t}\n\n\tgetArea(): number {\n\t\treturn this.length * this.length;\n\t}\n}\n\nfunction renderLargeShapes(shapes: Shape[]) {\n\tshapes.forEach((shape) => {\n\t\tconst area = shape.getArea();\n\t\tshape.render(area);\n\t});\n}\n\nconst shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];\nrenderLargeShapes(shapes);\n```\n\n"
		},
		{
			"id": "b9b8aabb-8a89-498a-9aa8-89b9a99988bb",
			"language": "typescript",
			"description": " Interface Segregation Principle (ISP)\n\nISP states that \"Clients should not be forced to depend upon interfaces that they do not use.\". This principle is very much related to the Single Responsibility Principle.\nWhat it really means is that you should always design your abstractions in a way that the clients that are using the exposed methods do not get the whole pie instead. That also include imposing the clients with the burden of implementing methods that they don’t actually need.\n\n",
			"bad_code": "\n\n```ts\ninterface SmartPrinter {\n\tprint();\n\tfax();\n\tscan();\n}\n\nclass AllInOnePrinter implements SmartPrinter {\n\tprint() {\n\t\t// ...\n\t}\n\n\tfax() {\n\t\t// ...\n\t}\n\n\tscan() {\n\t\t// ...\n\t}\n}\n\nclass EconomicPrinter implements SmartPrinter {\n\tprint() {\n\t\t// ...\n\t}\n\n\tfax() {\n\t\tthrow new Error('Fax not supported.');\n\t}\n\n\tscan() {\n\t\tthrow new Error('Scan not supported.');\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\ninterface Printer {\n\tprint();\n}\n\ninterface Fax {\n\tfax();\n}\n\ninterface Scanner {\n\tscan();\n}\n\nclass AllInOnePrinter implements Printer, Fax, Scanner {\n\tprint() {\n\t\t// ...\n\t}\n\n\tfax() {\n\t\t// ...\n\t}\n\n\tscan() {\n\t\t// ...\n\t}\n}\n\nclass EconomicPrinter implements Printer {\n\tprint() {\n\t\t// ...\n\t}\n}\n```\n\n"
		},
		{
			"id": "a8898999-8888-4a8a-898b-a9a9aa8a888b",
			"language": "typescript",
			"description": " Dependency Inversion Principle (DIP)\n\nThis principle states two essential things:\n\n1. High-level modules should not depend on low-level modules. Both should depend on abstractions.\n\n2. Abstractions should not depend upon details. Details should depend on abstractions.\n\nThis can be hard to understand at first, but if you've worked with Angular, you've seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.\n\nDIP is usually achieved by a using an inversion of control (IoC) container. An example of a powerful IoC container for TypeScript is [InversifyJs](https://www.npmjs.com/package/inversify)\n\n",
			"bad_code": "\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\nclass XmlFormatter {\n  parse<T>(content: string): T {\n    // Converts an XML string to an object T\n  }\n}\n\nclass ReportReader {\n\n  // BAD: We have created a dependency on a specific request implementation.\n  // We should just have ReportReader depend on a parse method: `parse`\n  private readonly formatter = new XmlFormatter();\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader();\nawait report = await reader.read('report.xml');\n```\n\n",
			"good_code": "\n\n```ts\nimport { readFile as readFileCb } from 'fs';\nimport { promisify } from 'util';\n\nconst readFile = promisify(readFileCb);\n\ntype ReportData = {\n  // ..\n}\n\ninterface Formatter {\n  parse<T>(content: string): T;\n}\n\nclass XmlFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // Converts an XML string to an object T\n  }\n}\n\n\nclass JsonFormatter implements Formatter {\n  parse<T>(content: string): T {\n    // Converts a JSON string to an object T\n  }\n}\n\nclass ReportReader {\n  constructor(private readonly formatter: Formatter) {\n  }\n\n  async read(path: string): Promise<ReportData> {\n    const text = await readFile(path, 'UTF8');\n    return this.formatter.parse<ReportData>(text);\n  }\n}\n\n// ...\nconst reader = new ReportReader(new XmlFormatter());\nawait report = await reader.read('report.xml');\n\n// or if we had to read a json report\nconst reader = new ReportReader(new JsonFormatter());\nawait report = await reader.read('report.json');\n```\n\n"
		},
		{
			"id": "89aba8aa-889b-48aa-b8b9-bab89aba8b8a",
			"language": "typescript",
			"description": " Single concept per test\n\nTests should also follow the _Single Responsibility Principle_. Make only one assert per unit test.\n\n",
			"bad_code": "\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n\tit('handles date boundaries', () => {\n\t\tlet date: AwesomeDate;\n\n\t\tdate = new AwesomeDate('1/1/2015');\n\t\tassert.equal('1/31/2015', date.addDays(30));\n\n\t\tdate = new AwesomeDate('2/1/2016');\n\t\tassert.equal('2/29/2016', date.addDays(28));\n\n\t\tdate = new AwesomeDate('2/1/2015');\n\t\tassert.equal('3/1/2015', date.addDays(28));\n\t});\n});\n```\n\n",
			"good_code": "\n\n```ts\nimport { assert } from 'chai';\n\ndescribe('AwesomeDate', () => {\n\tit('handles 30-day months', () => {\n\t\tconst date = new AwesomeDate('1/1/2015');\n\t\tassert.equal('1/31/2015', date.addDays(30));\n\t});\n\n\tit('handles leap year', () => {\n\t\tconst date = new AwesomeDate('2/1/2016');\n\t\tassert.equal('2/29/2016', date.addDays(28));\n\t});\n\n\tit('handles non-leap year', () => {\n\t\tconst date = new AwesomeDate('2/1/2015');\n\t\tassert.equal('3/1/2015', date.addDays(28));\n\t});\n});\n```\n\n"
		},
		{
			"id": "a88b9a99-b899-4b89-9aba-89aabba98aaa",
			"language": "typescript",
			"description": " The name of the test should reveal its intention\n\nWhen a test fails, its name is the first indication of what may have gone wrong.\n\n",
			"bad_code": "\n\n```ts\ndescribe('Calendar', () => {\n\tit('2/29/2020', () => {\n\t\t// ...\n\t});\n\n\tit('throws', () => {\n\t\t// ...\n\t});\n});\n```\n\n",
			"good_code": "\n\n```ts\ndescribe('Calendar', () => {\n\tit('should handle leap year', () => {\n\t\t// ...\n\t});\n\n\tit('should throw when format is invalid', () => {\n\t\t// ...\n\t});\n});\n```\n\n"
		},
		{
			"id": "98abb898-b99a-4a9b-8b9a-b8999b89babb",
			"language": "typescript",
			"description": " Prefer promises vs callbacks\n\nCallbacks aren't clean, and they cause excessive amounts of nesting _(the callback hell)_.  \nThere are utilities that transform existing functions using the callback style to a version that returns promises\n(for Node.js see [`util.promisify`](https://nodejs.org/dist/latest-v8.x/docs/api/util.html#util_util_promisify_original), for general purpose see [pify](https://www.npmjs.com/package/pify), [es6-promisify](https://www.npmjs.com/package/es6-promisify))\n\n",
			"bad_code": "\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\n\nfunction downloadPage(url: string, saveTo: string, callback: (error: Error, content?: string) => void) {\n\tget(url, (error, response) => {\n\t\tif (error) {\n\t\t\tcallback(error);\n\t\t} else {\n\t\t\twriteFile(saveTo, response.body, (error) => {\n\t\t\t\tif (error) {\n\t\t\t\t\tcallback(error);\n\t\t\t\t} else {\n\t\t\t\t\tcallback(null, response.body);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t});\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html', (error, content) => {\n\tif (error) {\n\t\tconsole.error(error);\n\t} else {\n\t\tconsole.log(content);\n\t}\n});\n```\n\n",
			"good_code": "\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n\treturn get(url).then((response) => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n\t.then((content) => console.log(content))\n\t.catch((error) => console.error(error));\n```\n\nPromises supports a few helper methods that help make code more concise:\n\n| Pattern                  | Description                                                                                                                                                        |\n| ------------------------ | ------------------------------------------------------------------------------------------------------------------------------------------------------------------ |\n| `Promise.resolve(value)` | Convert a value into a resolved promise.                                                                                                                           |\n| `Promise.reject(error)`  | Convert an error into a rejected promise.                                                                                                                          |\n| `Promise.all(promises)`  | Returns a new promise which is fulfilled with an array of fulfillment values for the passed promises or rejects with the reason of the first promise that rejects. |\n| `Promise.race(promises)` | Returns a new promise which is fulfilled/rejected with the result/error of the first settled promise from the array of passed promises.                            |\n\n`Promise.all` is especially useful when there is a need to run tasks in parallel. `Promise.race` makes it easier to implement things like timeouts for promises.\n\n"
		},
		{
			"id": "99a9a8aa-babb-48b8-bab9-8aabbabb9bba",
			"language": "typescript",
			"description": " Async/Await are even cleaner than Promises\n\nWith `async`/`await` syntax you can write code that is far cleaner and more understandable than chained promises. Within a function prefixed with `async` keyword, you have a way to tell the JavaScript runtime to pause the execution of code on the `await` keyword (when used on a promise).\n\n",
			"bad_code": "\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = util.promisify(writeFile);\n\nfunction downloadPage(url: string, saveTo: string): Promise<string> {\n\treturn get(url).then((response) => write(saveTo, response));\n}\n\ndownloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html')\n\t.then((content) => console.log(content))\n\t.catch((error) => console.error(error));\n```\n\n",
			"good_code": "\n\n```ts\nimport { get } from 'request';\nimport { writeFile } from 'fs';\nimport { promisify } from 'util';\n\nconst write = promisify(writeFile);\n\nasync function downloadPage(url: string, saveTo: string): Promise<string> {\n\tconst response = await get(url);\n\tawait write(saveTo, response);\n\treturn response;\n}\n\n// somewhere in an async function\ntry {\n\tconst content = await downloadPage('https://en.wikipedia.org/wiki/Robert_Cecil_Martin', 'article.html');\n\tconsole.log(content);\n} catch (error) {\n\tconsole.error(error);\n}\n```\n\n"
		},
		{
			"id": "9b88988a-989b-4aaa-b9aa-bb988889a8b8",
			"language": "typescript",
			"description": " Always use Error for throwing or rejecting\n\nJavaScript as well as TypeScript allow you to `throw` any object. A Promise can also be rejected with any reason object.  \nIt is advisable to use the `throw` syntax with an `Error` type. This is because your error might be caught in higher level code with a `catch` syntax.\nIt would be very confusing to catch a string message there and would make\n[debugging more painful](https://basarat.gitbook.io/typescript/type-system/exceptions#always-use-error).  \nFor the same reason you should reject promises with `Error` types.\n\n",
			"bad_code": "\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n\tthrow 'Not implemented.';\n}\n\nfunction get(): Promise<Item[]> {\n\treturn Promise.reject('Not implemented.');\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction calculateTotal(items: Item[]): number {\n\tthrow new Error('Not implemented.');\n}\n\nfunction get(): Promise<Item[]> {\n\treturn Promise.reject(new Error('Not implemented.'));\n}\n\n// or equivalent to:\n\nasync function get(): Promise<Item[]> {\n\tthrow new Error('Not implemented.');\n}\n```\n\nThe benefit of using `Error` types is that it is supported by the syntax `try/catch/finally` and implicitly all errors have the `stack` property which\nis very powerful for debugging.  \nThere are also other alternatives, not to use the `throw` syntax and instead always return custom error objects. TypeScript makes this even easier.\nConsider the following example:\n\n```ts\ntype Result<R> = { isError: false; value: R };\ntype Failure<E> = { isError: true; error: E };\ntype Failable<R, E> = Result<R> | Failure<E>;\n\nfunction calculateTotal(items: Item[]): Failable<number, 'empty'> {\n\tif (items.length === 0) {\n\t\treturn { isError: true, error: 'empty' };\n\t}\n\n\t// ...\n\treturn { isError: false, value: 42 };\n}\n```\n\nFor the detailed explanation of this idea refer to the [original post](https://medium.com/@dhruvrajvanshi/making-exceptions-type-safe-in-typescript-c4d200ee78e9).\n\n"
		},
		{
			"id": "ab9989aa-a89a-488b-88a8-bbb98a8a8bb9",
			"language": "typescript",
			"description": " Don't ignore caught errors\n\nDoing nothing with a caught error doesn't give you the ability to ever fix or react to said error. Logging the error to the console (`console.log`) isn't much better as often it can get lost in a sea of things printed to the console. If you wrap any bit of code in a `try/catch` it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.\n\n",
			"bad_code": "\n\n```ts\ntry {\n\tfunctionThatMightThrow();\n} catch (error) {\n\tconsole.log(error);\n}\n\n// or even worse\n\ntry {\n\tfunctionThatMightThrow();\n} catch (error) {\n\t// ignore error\n}\n```\n\n",
			"good_code": "\n\n```ts\nimport { logger } from './logging';\n\ntry {\n\tfunctionThatMightThrow();\n} catch (error) {\n\tlogger.log(error);\n}\n```\n\n"
		},
		{
			"id": "98989ab8-a9a8-498a-8a98-b8bba9a99988",
			"language": "typescript",
			"description": " Don't ignore rejected promises\n\nFor the same reason you shouldn't ignore caught errors from `try/catch`.\n\n",
			"bad_code": "\n\n```ts\ngetUser()\n\t.then((user: User) => {\n\t\treturn sendEmail(user.email, 'Welcome!');\n\t})\n\t.catch((error) => {\n\t\tconsole.log(error);\n\t});\n```\n\n",
			"good_code": "\n\n```ts\nimport { logger } from './logging';\n\ngetUser()\n\t.then((user: User) => {\n\t\treturn sendEmail(user.email, 'Welcome!');\n\t})\n\t.catch((error) => {\n\t\tlogger.log(error);\n\t});\n\n// or using the async/await syntax:\n\ntry {\n\tconst user = await getUser();\n\tawait sendEmail(user.email, 'Welcome!');\n} catch (error) {\n\tlogger.log(error);\n}\n```\n\n"
		},
		{
			"id": "abb98aab-a899-4bbb-a9a9-9b889899baaa",
			"language": "typescript",
			"description": " Use consistent capitalization\n\nCapitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just _be consistent_.\n\n",
			"bad_code": "\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst daysInMonth = 30;\n\nconst songs = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst Artists = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restore_database() {}\n\ntype animal = {\n\t/* ... */\n};\ntype Container = {\n\t/* ... */\n};\n```\n\n",
			"good_code": "\n\n```ts\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_MONTH = 30;\n\nconst SONGS = ['Back In Black', 'Stairway to Heaven', 'Hey Jude'];\nconst ARTISTS = ['ACDC', 'Led Zeppelin', 'The Beatles'];\n\nfunction eraseDatabase() {}\nfunction restoreDatabase() {}\n\ntype Animal = {\n\t/* ... */\n};\ntype Container = {\n\t/* ... */\n};\n```\n\nPrefer using `PascalCase` for class, interface, type and namespace names.  \nPrefer using `camelCase` for variables, functions and class members.\n\n"
		},
		{
			"id": "a9a9aa8a-a9b8-4889-b9b9-9aaa8baaab8a",
			"language": "typescript",
			"description": " Function callers and callees should be close\n\nIf a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee.\nWe tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.\n\n",
			"bad_code": "\n\n```ts\nclass PerformanceReview {\n\tconstructor(private readonly employee: Employee) {}\n\n\tprivate lookupPeers() {\n\t\treturn db.lookup(this.employee.id, 'peers');\n\t}\n\n\tprivate lookupManager() {\n\t\treturn db.lookup(this.employee, 'manager');\n\t}\n\n\tprivate getPeerReviews() {\n\t\tconst peers = this.lookupPeers();\n\t\t// ...\n\t}\n\n\treview() {\n\t\tthis.getPeerReviews();\n\t\tthis.getManagerReview();\n\t\tthis.getSelfReview();\n\n\t\t// ...\n\t}\n\n\tprivate getManagerReview() {\n\t\tconst manager = this.lookupManager();\n\t}\n\n\tprivate getSelfReview() {\n\t\t// ...\n\t}\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n",
			"good_code": "\n\n```ts\nclass PerformanceReview {\n\tconstructor(private readonly employee: Employee) {}\n\n\treview() {\n\t\tthis.getPeerReviews();\n\t\tthis.getManagerReview();\n\t\tthis.getSelfReview();\n\n\t\t// ...\n\t}\n\n\tprivate getPeerReviews() {\n\t\tconst peers = this.lookupPeers();\n\t\t// ...\n\t}\n\n\tprivate lookupPeers() {\n\t\treturn db.lookup(this.employee.id, 'peers');\n\t}\n\n\tprivate getManagerReview() {\n\t\tconst manager = this.lookupManager();\n\t}\n\n\tprivate lookupManager() {\n\t\treturn db.lookup(this.employee, 'manager');\n\t}\n\n\tprivate getSelfReview() {\n\t\t// ...\n\t}\n}\n\nconst review = new PerformanceReview(employee);\nreview.review();\n```\n\n"
		},
		{
			"id": "b999bbba-ba8b-4999-8b98-baaa99a898a9",
			"language": "typescript",
			"description": " Organize imports\n\nWith clean and easy to read import statements you can quickly see the dependencies of current code. Make sure you apply following good practices for `import` statements:\n\n-   Import statements should be alphabetized and grouped.\n-   Unused imports should be removed.\n-   Named imports must be alphabetized (i.e. `import {A, B, C} from 'foo';`)\n-   Import sources must be alphabetized within groups, i.e.: `import * as foo from 'a'; import * as bar from 'b';`\n-   Groups of imports are delineated by blank lines.\n-   Groups must respect following order:\n    -   Polyfills (i.e. `import 'reflect-metadata';`)\n    -   Node builtin modules (i.e. `import fs from 'fs';`)\n    -   external modules (i.e. `import { query } from 'itiriri';`)\n    -   internal modules (i.e `import { UserService } from 'src/services/userService';`)\n    -   modules from a parent directory (i.e. `import foo from '../foo'; import qux from '../../foo/qux';`)\n    -   modules from the same or a sibling's directory (i.e. `import bar from './bar'; import baz from './bar/baz';`)\n\n",
			"bad_code": "\n\n```ts\nimport { TypeDefinition } from '../types/typeDefinition';\nimport { AttributeTypes } from '../model/attribute';\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport fs from 'fs';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\nimport { BindingScopeEnum, Container } from 'inversify';\nimport 'reflect-metadata';\n```\n\n",
			"good_code": "\n\n```ts\nimport 'reflect-metadata';\n\nimport fs from 'fs';\nimport { BindingScopeEnum, Container } from 'inversify';\n\nimport { AttributeTypes } from '../model/attribute';\nimport { TypeDefinition } from '../types/typeDefinition';\n\nimport { ApiCredentials, Adapters } from './common/api/authorization';\nimport { ConfigPlugin } from './plugins/config/configPlugin';\n```\n\n"
		},
		{
			"id": "9bb9bbb9-b9ab-498b-88b9-b88aa9a8ba89",
			"language": "typescript",
			"description": " Use typescript aliases\n\nCreate prettier imports by defining the paths and baseUrl properties in the compilerOptions section in the `tsconfig.json`\n\nThis will avoid long relative paths when doing imports.\n\n",
			"bad_code": "\n\n```ts\nimport { UserService } from '../../../services/UserService';\n```\n\n",
			"good_code": "\n\n```ts\nimport { UserService } from '@services/UserService';\n```\n\n```js\n// tsconfig.json\n...\n  \"compilerOptions\": {\n    ...\n    \"baseUrl\": \"src\",\n    \"paths\": {\n      \"@services\": [\"services/*\"]\n    }\n    ...\n  }\n...\n```\n\n"
		},
		{
			"id": "a9bb9abb-b9bb-4bbb-a9b9-9bbaaab88b8a",
			"language": "typescript",
			"description": " Prefer self explanatory code instead of comments\n\nComments are an apology, not a requirement. Good code _mostly_ documents itself.\n\n",
			"bad_code": "\n\n```ts\n// Check if subscription is active.\nif (subscription.endDate > Date.now) {\n}\n```\n\n",
			"good_code": "\n\n```ts\nconst isSubscriptionActive = subscription.endDate > Date.now;\nif (isSubscriptionActive) {\n\t/* ... */\n}\n```\n\n"
		},
		{
			"id": "888988bb-a8a9-4b8b-a9bb-9ab8abaa88a9",
			"language": "typescript",
			"description": " Don't leave commented out code in your codebase\n\nVersion control exists for a reason. Leave old code in your history.\n\n",
			"bad_code": "\n\n```ts\ntype User = {\n\tname: string;\n\temail: string;\n\t// age: number;\n\t// jobPosition: string;\n};\n```\n\n",
			"good_code": "\n\n```ts\ntype User = {\n\tname: string;\n\temail: string;\n};\n```\n\n"
		},
		{
			"id": "b9988b88-aba8-49b8-ba98-8baa99b8888b",
			"language": "typescript",
			"description": " Don't have journal comments\n\nRemember, use version control! There's no need for dead code, commented code, and especially journal comments. Use `git log` to get history!\n\n",
			"bad_code": "\n\n```ts\n/**\n * 2016-12-20: Removed monads, didn't understand them (RM)\n * 2016-10-01: Improved using special monads (JP)\n * 2016-02-03: Added type-checking (LI)\n * 2015-03-14: Implemented combine (JR)\n */\nfunction combine(a: number, b: number): number {\n\treturn a + b;\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction combine(a: number, b: number): number {\n\treturn a + b;\n}\n```\n\n"
		},
		{
			"id": "a9b89989-8a99-4aa9-8999-89a99a8a9998",
			"language": "typescript",
			"description": " Avoid positional markers\n\nThey usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.  \nMost IDE support code folding feature that allows you to collapse/expand blocks of code (see Visual Studio Code [folding regions](https://code.visualstudio.com/updates/v1_17#_folding-regions)).\n\n",
			"bad_code": "\n\n```ts\n////////////////////////////////////////////////////////////////////////////////\n// Client class\n////////////////////////////////////////////////////////////////////////////////\nclass Client {\n\tid: number;\n\tname: string;\n\taddress: Address;\n\tcontact: Contact;\n\n\t////////////////////////////////////////////////////////////////////////////////\n\t// public methods\n\t////////////////////////////////////////////////////////////////////////////////\n\tpublic describe(): string {\n\t\t// ...\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////////\n\t// private methods\n\t////////////////////////////////////////////////////////////////////////////////\n\tprivate describeAddress(): string {\n\t\t// ...\n\t}\n\n\tprivate describeContact(): string {\n\t\t// ...\n\t}\n}\n```\n\n",
			"good_code": "\n\n```ts\nclass Client {\n\tid: number;\n\tname: string;\n\taddress: Address;\n\tcontact: Contact;\n\n\tpublic describe(): string {\n\t\t// ...\n\t}\n\n\tprivate describeAddress(): string {\n\t\t// ...\n\t}\n\n\tprivate describeContact(): string {\n\t\t// ...\n\t}\n}\n```\n\n"
		},
		{
			"id": "99a8b9ab-aa88-499a-a999-9a8a8b9a89ab",
			"language": "typescript",
			"description": " TODO comments\n\nWhen you find yourself that you need to leave notes in the code for some later improvements,\ndo that using `// TODO` comments. Most IDE have special support for those kinds of comments so that\nyou can quickly go over the entire list of todos.\n\nKeep in mind however that a _TODO_ comment is not an excuse for bad code.\n\n",
			"bad_code": "\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n\t// ensure `dueDate` is indexed.\n\treturn db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n",
			"good_code": "\n\n```ts\nfunction getActiveSubscriptions(): Promise<Subscription[]> {\n\t// TODO: ensure `dueDate` is indexed.\n\treturn db.subscriptions.find({ dueDate: { $lte: new Date() } });\n}\n```\n\n"
		}
	]
}
